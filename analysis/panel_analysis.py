import streamlit as st
import pandas as pd
import altair as alt

"""
# Solar Panel analysis
This page allows basic plotting of generated electric from panels and exported electric to the grid.

Drag and drop 3 files (all at once if you want) to analyse export, import and house use data. 
"""


def load_import_export_data(file) -> pd.DataFrame:
    """
    Load data that contains 30 minute import/export records for a month's worth of solar power usage.

    :param file: The csv file to be loaded. Must have headers [" Start"], [" End"] and ["Consumption (kWh)"]
    :return: A dataframe containing the data.
    """
    data = pd.read_csv(file)
    data[" Start"] = pd.to_datetime(data[" Start"])
    data[" End"] = pd.to_datetime(data[" End"])
    data = data[[" Start", "Consumption (kWh)", " End"]]
    return data


def load_generation_data(file) -> pd.DataFrame:
    """
    Load a csv containing the amount of energy generated by the solar panels.

    :param file:
        The csv containing the data. Must contain ["Number"], ["Date"], ["Days generation"].
        Number is just an index into the number of rows within the data, e.g. from 1 to 30 for 30 days' of data.
    :return: A dataframe with the data.
    """
    data = pd.read_csv(file)
    data["Date"] = pd.to_datetime(data["Date"])
    return data


def data_analysis(export_df: pd.DataFrame, import_df: pd.DataFrame, generation_df: pd.DataFrame):
    """
    A function to perform the data manipulation to calculate various statistics and to plot them per day.

    The output of this function is viewable on the streamlit app.

    Statistics calculated are:
        * energy generated from the panels each day
        * exported energy to the grid each day
        * imported energy from the grid each day
        * self-use per day: generated electric minus export amount
        * energy used by the house each day: self-use plus import

    :param export_df: A dataframe containing the export data.
    :param import_df: A dataframe containing the import data.
    :param generation_df: A dataframe containing the generation data.
    """
    # plot the amount imported from the grid and exported to the grid per day over a month
    st.subheader("Daily comparison")

    # sort out daily exports
    daily_exports = export_df.groupby([export_df[' Start'].dt.year, export_df[' Start'].dt.month, export_df[' Start'].dt.day])['Consumption (kWh)'].sum()
    temp_df = pd.DataFrame(daily_exports)
    temp_df.rename(columns={"Consumption (kWh)": "Export (kWh)"}, inplace=True)
    daily_exports = temp_df

    # sort out daily imports
    daily_imports = import_df.groupby([export_df[' Start'].dt.year, export_df[' Start'].dt.month, export_df[' Start'].dt.day])['Consumption (kWh)'].sum()
    temp_df = pd.DataFrame(daily_imports)
    temp_df.rename(columns={"Consumption (kWh)": "Import (kWh)"}, inplace=True)
    daily_imports = temp_df

    # concatenate the import, export and generation data
    electric_use_df = pd.concat([daily_exports, daily_imports], axis=1)
    electric_use_df['Days generation'] = generation_df['Days generation'].values
    electric_use_df['Self use'] = electric_use_df['Days generation'] - electric_use_df['Export (kWh)']
    electric_use_df['House day total use'] = electric_use_df['Self use'] + electric_use_df['Import (kWh)']

    # change how the data is stored in the df for plotting purposes
    electric_use_df.index.rename(['Year', 'Month', 'Day'], inplace=True)
    stacked = electric_use_df.stack()
    stacked_df = pd.DataFrame(stacked)
    stacked_df.index.rename(['Year', 'Month', 'Day', 'Type'], inplace=True)
    stacked_df.columns = ['Energy (kWh)']
    stacked_df.reset_index(inplace=True)

    # find the month and day for proper order of the data
    stacked_df["Date"] = pd.to_datetime(stacked_df[["Year", "Month", "Day"]])

    # stacked plot with text
    bar_chart = alt.Chart(
        stacked_df, title="Daily energy comparison", width=1000, height=1000).mark_bar(size=20).encode(
        x=alt.X('sum(Energy (kWh)):Q', stack="zero", title="Energy (kWh)"),
        y=alt.Y(
            'Date:T',
            sort="descending",
            title=f"Date from "
                  f"{stacked_df['Date'].min().strftime('%d/%m/%Y')} to "
                  f"{stacked_df['Date'].max().strftime('%d/%m/%Y')}"
        ),
        color=alt.Color('Type:N', title="Usage type")
    )

    text = alt.Chart(stacked_df).mark_text(dx=-15, dy=3, color='white').encode(
        x=alt.X('sum(Energy (kWh)):Q', stack='zero'),
        y=alt.Y('Date:T', sort="descending"),
        detail=alt.Detail('Type:N', title="Usage type"),
        text=alt.Text('sum(Energy (kWh)):Q', format='0.1f')
    )
    st.altair_chart(bar_chart + text)

    # show data
    export_checkbox = st.checkbox("Show export data")
    if export_checkbox:
        st.write("Export data", export_df)

    import_checkbox = st.checkbox("Show import data")
    if import_checkbox:
        st.write("Import data", import_df)

    generate_checkbox = st.checkbox("Show generated power data")
    if generate_checkbox:
        st.dataframe(generation_df)


# External file upload/example data usage and entry point to the app
example_data = st.checkbox("Use example data")
external_files = st.file_uploader("Files upload", type=["csv"], accept_multiple_files=True)

if example_data:
    export_data = load_import_export_data("../example_data/example export.csv")
    import_data = load_import_export_data("../example_data/example import.csv")
    generation_data = load_generation_data("../example_data/example days generation.csv")
    # run analysis with example data
    data_analysis(export_df=export_data, import_df=import_data, generation_df=generation_data)

elif not external_files:
    st.error("No files have been added or example data has not been selected")

elif len(external_files) < 3:
    st.error("3 files are needed to calculate import/export rates and consumption. "
             "One containing **import** in the title, one containing **export** in the title and "
             "one containing **generation** in the title.")
else:
    export_data = None
    import_data = None
    generation_data = None
    for data_file in external_files:
        if "export" in data_file.name.lower():
            export_data = load_import_export_data(data_file)
        elif "import" in data_file.name.lower():
            import_data = load_import_export_data(data_file)
        elif "generation" in data_file.name.lower():
            generation_data = load_generation_data(data_file)

    if export_data is not None and import_data is not None and generation_data is not None:
        data_analysis(export_df=export_data, import_df=import_data, generation_df=generation_data)
    else:
        st.write("No file provided")
